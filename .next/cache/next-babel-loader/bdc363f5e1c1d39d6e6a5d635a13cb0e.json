{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { serialize } from 'cookie';\n\nasync function handler(req, res) {\n  console.log('req.method in Signin:' + req.method);\n\n  if (req.method === \"POST\") {\n    try {\n      const response = await axios.post('http://localhost:5001/api/users/signup', {\n        email: req.body.email,\n        password: req.body.password\n      });\n\n      const headersDet = _objectSpread({}, response.headers);\n\n      const cookieExt = headersDet['set-cookie'];\n      const initParse = cookieExt[0];\n      const remFirstp = initParse.replace(/^express:sess=/, '');\n      const remlastp = remFirstp.split('; path=/;');\n      res.setHeader('Set-Cookie', serialize('express:sess', remlastp[0], {\n        path: '/'\n      }));\n      res.status(200).json(response.data);\n    } catch (err) {\n      console.log('err:' + err);\n      res.status(401).json({\n        message: \"Not authenticated!\"\n      });\n    }\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/satheeskumarpalanisamy/service/careerservice/client/pages/api/signup.js"],"names":["axios","serialize","handler","req","res","console","log","method","response","post","email","body","password","headersDet","headers","cookieExt","initParse","remFirstp","replace","remlastp","split","setHeader","path","status","json","data","err","message"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,QAA1B;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAE7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BH,GAAG,CAACI,MAA1C;;AACA,MAAIJ,GAAG,CAACI,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,wCAAX,EAAqD;AAC1EC,QAAAA,KAAK,EAAEP,GAAG,CAACQ,IAAJ,CAASD,KAD0D;AAE1EE,QAAAA,QAAQ,EAAET,GAAG,CAACQ,IAAJ,CAASC;AAFuD,OAArD,CAAvB;;AAKA,YAAMC,UAAU,qBAAOL,QAAQ,CAACM,OAAhB,CAAhB;;AACA,YAAMC,SAAS,GAAIF,UAAU,CAAC,YAAD,CAA7B;AACA,YAAMG,SAAS,GAAGD,SAAS,CAAC,CAAD,CAA3B;AACA,YAAME,SAAS,GAAGD,SAAS,CAACE,OAAV,CAAkB,gBAAlB,EAAoC,EAApC,CAAlB;AACA,YAAMC,QAAQ,GAAGF,SAAS,CAACG,KAAV,CAAgB,WAAhB,CAAjB;AAGAhB,MAAAA,GAAG,CAACiB,SAAJ,CAAc,YAAd,EAA4BpB,SAAS,CAAC,cAAD,EAAgBkB,QAAQ,CAAC,CAAD,CAAxB,EAA6B;AAAEG,QAAAA,IAAI,EAAE;AAAR,OAA7B,CAArC;AAEAlB,MAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,QAAQ,CAACiB,IAA9B;AACD,KAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZrB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAASoB,GAArB;AACAtB,MAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAArB;AAEH;AACF;AAEF;;AAEC,eAAezB,OAAf","sourcesContent":["import axios from 'axios';\nimport { serialize } from 'cookie';\n\nasync function handler(req, res) {\n\n    console.log('req.method in Signin:' + req.method );\n    if (req.method === \"POST\") {\n      try {\n        const response = await axios.post('http://localhost:5001/api/users/signup', {\n          email: req.body.email,\n          password: req.body.password\n        })\n        \n        const headersDet = {...response.headers};\n        const cookieExt  = headersDet['set-cookie']\n        const initParse = cookieExt[0];\n        const remFirstp = initParse.replace(/^express:sess=/, '');\n        const remlastp = remFirstp.split('; path=/;');\n     \n     \n        res.setHeader('Set-Cookie', serialize('express:sess',remlastp[0], { path: '/' }));\n\n        res.status(200).json(response.data);\n      } catch (err) {\n        console.log('err:' + err);\n        res.status(401).json({ message: \"Not authenticated!\" });\n      \n    }\n  }\n\n}\n  \n  export default handler;\n  "]},"metadata":{},"sourceType":"module"}