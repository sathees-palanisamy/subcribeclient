{"ast":null,"code":"import axios from \"axios\";\n\nasync function handler(req, res) {\n  console.log(\"req.method in Signin:\" + req.method);\n\n  if (req.method === \"POST\") {\n    try {\n      const response = await axios.post(\"http://localhost:5001/api/users/signin\", {\n        email: req.body.email,\n        password: req.body.password\n      }); // safely handles circular references\n\n      JSON.safeStringify = (obj, indent = 2) => {\n        let cache = [];\n        const retVal = JSON.stringify(obj, (key, value) => typeof value === \"object\" && value !== null ? cache.includes(value) ? undefined // Duplicate reference found, discard key\n        : cache.push(value) && value // Store value in our collection\n        : value, indent);\n        cache = null;\n        return retVal;\n      }; // Example:\n\n\n      console.log('options', JSON.safeStringify(response));\n      const data1 = await JSON.stringify(response);\n      console.log(\"data1:\" + data1);\n      console.log(\"id:\" + response.data.id);\n      res.status(200).json(response.data);\n    } catch (err) {\n      console.log(\"err:\" + err);\n      res.status(401).json({\n        message: \"Not authenticated!\"\n      });\n    }\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/satheeskumarpalanisamy/service/careerservice/client/pages/api/signin.js"],"names":["axios","handler","req","res","console","log","method","response","post","email","body","password","JSON","safeStringify","obj","indent","cache","retVal","stringify","key","value","includes","undefined","push","data1","data","id","status","json","err","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BH,GAAG,CAACI,MAA1C;;AACA,MAAIJ,GAAG,CAACI,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACH,YAAMC,QAAQ,GAAI,MAAMP,KAAK,CACzBQ,IADoB,CAEnB,wCAFmB,EAGnB;AACEC,QAAAA,KAAK,EAAEP,GAAG,CAACQ,IAAJ,CAASD,KADlB;AAEEE,QAAAA,QAAQ,EAAET,GAAG,CAACQ,IAAJ,CAASC;AAFrB,OAHmB,CAAxB,CADG,CAWA;;AACRC,MAAAA,IAAI,CAACC,aAAL,GAAqB,CAACC,GAAD,EAAMC,MAAM,GAAG,CAAf,KAAqB;AACxC,YAAIC,KAAK,GAAG,EAAZ;AACA,cAAMC,MAAM,GAAGL,IAAI,CAACM,SAAL,CACbJ,GADa,EAEb,CAACK,GAAD,EAAMC,KAAN,KACE,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,GACIJ,KAAK,CAACK,QAAN,CAAeD,KAAf,IACEE,SADF,CACY;AADZ,UAEEN,KAAK,CAACO,IAAN,CAAWH,KAAX,KAAqBA,KAH3B,CAGiC;AAHjC,UAIIA,KAPO,EAQbL,MARa,CAAf;AAUAC,QAAAA,KAAK,GAAG,IAAR;AACA,eAAOC,MAAP;AACD,OAdD,CAZQ,CA4BR;;;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBO,IAAI,CAACC,aAAL,CAAmBN,QAAnB,CAAvB;AAGM,YAAMiB,KAAK,GAAG,MAAMZ,IAAI,CAACM,SAAL,CAAeX,QAAf,CAApB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAWmB,KAAvB;AAEApB,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQE,QAAQ,CAACkB,IAAT,CAAcC,EAAlC;AACAvB,MAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBrB,QAAQ,CAACkB,IAA9B;AACD,KArCD,CAqCE,OAAOI,GAAP,EAAY;AACZzB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAASwB,GAArB;AACA1B,MAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD;AACF;AACF;;AAED,eAAe7B,OAAf","sourcesContent":["import axios from \"axios\";\n\nasync function handler(req, res) {\n  console.log(\"req.method in Signin:\" + req.method);\n  if (req.method === \"POST\") {\n    try {\n     const response =  await axios\n        .post(\n          \"http://localhost:5001/api/users/signin\",\n          {\n            email: req.body.email,\n            password: req.body.password,\n          },\n        )\n\n\n        // safely handles circular references\nJSON.safeStringify = (obj, indent = 2) => {\n  let cache = [];\n  const retVal = JSON.stringify(\n    obj,\n    (key, value) =>\n      typeof value === \"object\" && value !== null\n        ? cache.includes(value)\n          ? undefined // Duplicate reference found, discard key\n          : cache.push(value) && value // Store value in our collection\n        : value,\n    indent\n  );\n  cache = null;\n  return retVal;\n};\n\n// Example:\nconsole.log('options', JSON.safeStringify(response));\n\n\n      const data1 = await JSON.stringify(response);\n      console.log(\"data1:\" + data1);\n\n      console.log(\"id:\" + response.data.id);\n      res.status(200).json(response.data);\n    } catch (err) {\n      console.log(\"err:\" + err);\n      res.status(401).json({ message: \"Not authenticated!\" });\n    }\n  }\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}